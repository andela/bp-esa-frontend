// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Checkbox component should not regress(with label) 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Checkbox
    checkCondition={false}
    id="test-checkbox"
    label="test checkbox"
    name="test"
    noLabel={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Input />,
        "test checkbox",
      ],
      "className": "test-checkbox-label",
      "htmlFor": "test-checkbox",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "test checkbox",
    ],
    "type": "label",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Input />,
          "test checkbox",
        ],
        "className": "test-checkbox-label",
        "htmlFor": "test-checkbox",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "test checkbox",
      ],
      "type": "label",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`The Checkbox component should not regress(without label) 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Checkbox
    checkCondition={false}
    id="test-checkbox2"
    label=""
    name="test2"
    noLabel={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`The DatePicker component should not regress 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DatePicker
    dateSelected=""
    onChange={[Function]}
    selection="to"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "allowSameDay": false,
      "calendarClassName": "custom-date-picker",
      "dateFormat": "MMMM DD, YYYY",
      "dateFormatCalendar": "MMMM YYYY",
      "disabled": false,
      "disabledKeyboardNavigation": false,
      "dropdownMode": "select",
      "maxDate": "2019-09-13T06:49:17.309Z",
      "monthsShown": 1,
      "nextMonthButtonLabel": "Next month",
      "onBlur": [Function],
      "onChange": [Function],
      "onClickOutside": [Function],
      "onFocus": [Function],
      "onInputClick": [Function],
      "onInputError": [Function],
      "onKeyDown": [Function],
      "onMonthChange": [Function],
      "onSelect": [Function],
      "onYearChange": [Function],
      "preventOpenOnFocus": false,
      "previousMonthButtonLabel": "Previous Month",
      "readOnly": false,
      "renderDayContents": [Function],
      "selected": undefined,
      "shouldCloseOnSelect": false,
      "showTimeSelect": false,
      "timeCaption": "Time",
      "timeIntervals": 30,
      "withPortal": false,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "allowSameDay": false,
        "calendarClassName": "custom-date-picker",
        "dateFormat": "MMMM DD, YYYY",
        "dateFormatCalendar": "MMMM YYYY",
        "disabled": false,
        "disabledKeyboardNavigation": false,
        "dropdownMode": "select",
        "maxDate": "2019-09-13T06:49:17.309Z",
        "monthsShown": 1,
        "nextMonthButtonLabel": "Next month",
        "onBlur": [Function],
        "onChange": [Function],
        "onClickOutside": [Function],
        "onFocus": [Function],
        "onInputClick": [Function],
        "onInputError": [Function],
        "onKeyDown": [Function],
        "onMonthChange": [Function],
        "onSelect": [Function],
        "onYearChange": [Function],
        "preventOpenOnFocus": false,
        "previousMonthButtonLabel": "Previous Month",
        "readOnly": false,
        "renderDayContents": [Function],
        "selected": undefined,
        "shouldCloseOnSelect": false,
        "showTimeSelect": false,
        "timeCaption": "Time",
        "timeIntervals": 30,
        "withPortal": false,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`The FilterComponent component should not regress 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilterComponent
    filter={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <form
        autoComplete="off"
        className="filter-box"
        onChange={[Function]}
        onSubmit={[Function]}
      >
        <input
          className="search-input"
          name="searchTerm"
          type="text"
        />
        <div
          className="filter-button"
          data-toggle="filter-dropdown"
          onClick={[Function]}
        >
          <img
            alt="filter"
            className="filter-button-icon"
            data-toggle="filter-dropdown"
            src="https://img.icons8.com/small/100/000000/sorting-options.png"
          />
        </div>
      </form>,
      "className": "filter-container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "autoComplete": "off",
        "children": Array [
          <input
            className="search-input"
            name="searchTerm"
            type="text"
          />,
          <div
            className="filter-button"
            data-toggle="filter-dropdown"
            onClick={[Function]}
          >
            <img
              alt="filter"
              className="filter-button-icon"
              data-toggle="filter-dropdown"
              src="https://img.icons8.com/small/100/000000/sorting-options.png"
            />
          </div>,
          false,
        ],
        "className": "filter-box",
        "onChange": [Function],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "search-input",
            "name": "searchTerm",
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt="filter"
              className="filter-button-icon"
              data-toggle="filter-dropdown"
              src="https://img.icons8.com/small/100/000000/sorting-options.png"
            />,
            "className": "filter-button",
            "data-toggle": "filter-dropdown",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "filter",
              "className": "filter-button-icon",
              "data-toggle": "filter-dropdown",
              "src": "https://img.icons8.com/small/100/000000/sorting-options.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        false,
      ],
      "type": "form",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <form
          autoComplete="off"
          className="filter-box"
          onChange={[Function]}
          onSubmit={[Function]}
        >
          <input
            className="search-input"
            name="searchTerm"
            type="text"
          />
          <div
            className="filter-button"
            data-toggle="filter-dropdown"
            onClick={[Function]}
          >
            <img
              alt="filter"
              className="filter-button-icon"
              data-toggle="filter-dropdown"
              src="https://img.icons8.com/small/100/000000/sorting-options.png"
            />
          </div>
        </form>,
        "className": "filter-container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "autoComplete": "off",
          "children": Array [
            <input
              className="search-input"
              name="searchTerm"
              type="text"
            />,
            <div
              className="filter-button"
              data-toggle="filter-dropdown"
              onClick={[Function]}
            >
              <img
                alt="filter"
                className="filter-button-icon"
                data-toggle="filter-dropdown"
                src="https://img.icons8.com/small/100/000000/sorting-options.png"
              />
            </div>,
            false,
          ],
          "className": "filter-box",
          "onChange": [Function],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "search-input",
              "name": "searchTerm",
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="filter"
                className="filter-button-icon"
                data-toggle="filter-dropdown"
                src="https://img.icons8.com/small/100/000000/sorting-options.png"
              />,
              "className": "filter-button",
              "data-toggle": "filter-dropdown",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "filter",
                "className": "filter-button-icon",
                "data-toggle": "filter-dropdown",
                "src": "https://img.icons8.com/small/100/000000/sorting-options.png",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "div",
          },
          false,
        ],
        "type": "form",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`The FilterDropdown component should not regress 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilterDropdown
    filters={
      Object {
        "automation-type": "",
        "date": Object {
          "from": "",
          "to": "",
        },
        "emailAutomation": "",
        "nokoAutomation": "",
        "search-by": "",
        "searchTerm": "",
        "showFilterDropdown": false,
        "slackAutomation": "",
      }
    }
    handleInputChange={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <FilterSection
          inputs={
            Array [
              Object {
                "checkCondition": false,
                "id": "search-by-fellow",
                "label": "fellow",
                "name": "search-by",
                "noLabel": false,
                "value": "fellow",
              },
              Object {
                "checkCondition": false,
                "id": "search-by-partner",
                "label": "partner",
                "name": "search-by",
                "noLabel": false,
                "value": "partner",
              },
            ]
          }
          section="search-by"
        />,
        <FilterSection
          inputs={
            Array [
              Object {
                "checkCondition": false,
                "id": "automation-type-onboarding",
                "label": "onboarding",
                "name": "automation-type",
                "noLabel": false,
                "value": "onboarding",
              },
              Object {
                "checkCondition": false,
                "id": "automation-type-offboarding",
                "label": "offboarding",
                "name": "automation-type",
                "noLabel": false,
                "value": "offboarding",
              },
            ]
          }
          section="automation-type"
        />,
        <AutomationStatus
          statusInputs={
            Array [
              Object {
                "checkboxes": Array [
                  Object {
                    "checkCondition": false,
                    "id": "emailAutomation-success",
                    "label": "",
                    "name": "emailAutomation",
                    "noLabel": true,
                    "value": "success",
                  },
                  Object {
                    "checkCondition": false,
                    "id": "emailAutomation-failure",
                    "label": undefined,
                    "name": "emailAutomation",
                    "noLabel": true,
                    "value": "failure",
                  },
                ],
                "section": "email",
              },
              Object {
                "checkboxes": Array [
                  Object {
                    "checkCondition": false,
                    "id": "slackAutomation-success",
                    "label": "",
                    "name": "slackAutomation",
                    "noLabel": true,
                    "value": "success",
                  },
                  Object {
                    "checkCondition": false,
                    "id": "slackAutomation-failure",
                    "label": undefined,
                    "name": "slackAutomation",
                    "noLabel": true,
                    "value": "failure",
                  },
                ],
                "section": "slack",
              },
              Object {
                "checkboxes": Array [
                  Object {
                    "checkCondition": false,
                    "id": "nokoAutomation-success",
                    "label": "",
                    "name": "nokoAutomation",
                    "noLabel": true,
                    "value": "success",
                  },
                  Object {
                    "checkCondition": false,
                    "id": "nokoAutomation-failure",
                    "label": undefined,
                    "name": "nokoAutomation",
                    "noLabel": true,
                    "value": "failure",
                  },
                ],
                "section": "noko",
              },
            ]
          }
        />,
        <AutomationDate
          dateInputs={
            Array [
              Object {
                "dateSelected": "",
                "onChange": [Function],
                "selection": "from",
              },
              Object {
                "dateSelected": "",
                "minDate": undefined,
                "onChange": [Function],
                "selection": "to",
              },
            ]
          }
        />,
        <button
          className="apply-filters"
          type="submit"
        >
          Apply Filters
        </button>,
      ],
      "className": "filter-dropdown-parent",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "inputs": Array [
            Object {
              "checkCondition": false,
              "id": "search-by-fellow",
              "label": "fellow",
              "name": "search-by",
              "noLabel": false,
              "value": "fellow",
            },
            Object {
              "checkCondition": false,
              "id": "search-by-partner",
              "label": "partner",
              "name": "search-by",
              "noLabel": false,
              "value": "partner",
            },
          ],
          "section": "search-by",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "inputs": Array [
            Object {
              "checkCondition": false,
              "id": "automation-type-onboarding",
              "label": "onboarding",
              "name": "automation-type",
              "noLabel": false,
              "value": "onboarding",
            },
            Object {
              "checkCondition": false,
              "id": "automation-type-offboarding",
              "label": "offboarding",
              "name": "automation-type",
              "noLabel": false,
              "value": "offboarding",
            },
          ],
          "section": "automation-type",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "statusInputs": Array [
            Object {
              "checkboxes": Array [
                Object {
                  "checkCondition": false,
                  "id": "emailAutomation-success",
                  "label": "",
                  "name": "emailAutomation",
                  "noLabel": true,
                  "value": "success",
                },
                Object {
                  "checkCondition": false,
                  "id": "emailAutomation-failure",
                  "label": undefined,
                  "name": "emailAutomation",
                  "noLabel": true,
                  "value": "failure",
                },
              ],
              "section": "email",
            },
            Object {
              "checkboxes": Array [
                Object {
                  "checkCondition": false,
                  "id": "slackAutomation-success",
                  "label": "",
                  "name": "slackAutomation",
                  "noLabel": true,
                  "value": "success",
                },
                Object {
                  "checkCondition": false,
                  "id": "slackAutomation-failure",
                  "label": undefined,
                  "name": "slackAutomation",
                  "noLabel": true,
                  "value": "failure",
                },
              ],
              "section": "slack",
            },
            Object {
              "checkboxes": Array [
                Object {
                  "checkCondition": false,
                  "id": "nokoAutomation-success",
                  "label": "",
                  "name": "nokoAutomation",
                  "noLabel": true,
                  "value": "success",
                },
                Object {
                  "checkCondition": false,
                  "id": "nokoAutomation-failure",
                  "label": undefined,
                  "name": "nokoAutomation",
                  "noLabel": true,
                  "value": "failure",
                },
              ],
              "section": "noko",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "dateInputs": Array [
            Object {
              "dateSelected": "",
              "onChange": [Function],
              "selection": "from",
            },
            Object {
              "dateSelected": "",
              "minDate": undefined,
              "onChange": [Function],
              "selection": "to",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Apply Filters",
          "className": "apply-filters",
          "type": "submit",
        },
        "ref": null,
        "rendered": "Apply Filters",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <FilterSection
            inputs={
              Array [
                Object {
                  "checkCondition": false,
                  "id": "search-by-fellow",
                  "label": "fellow",
                  "name": "search-by",
                  "noLabel": false,
                  "value": "fellow",
                },
                Object {
                  "checkCondition": false,
                  "id": "search-by-partner",
                  "label": "partner",
                  "name": "search-by",
                  "noLabel": false,
                  "value": "partner",
                },
              ]
            }
            section="search-by"
          />,
          <FilterSection
            inputs={
              Array [
                Object {
                  "checkCondition": false,
                  "id": "automation-type-onboarding",
                  "label": "onboarding",
                  "name": "automation-type",
                  "noLabel": false,
                  "value": "onboarding",
                },
                Object {
                  "checkCondition": false,
                  "id": "automation-type-offboarding",
                  "label": "offboarding",
                  "name": "automation-type",
                  "noLabel": false,
                  "value": "offboarding",
                },
              ]
            }
            section="automation-type"
          />,
          <AutomationStatus
            statusInputs={
              Array [
                Object {
                  "checkboxes": Array [
                    Object {
                      "checkCondition": false,
                      "id": "emailAutomation-success",
                      "label": "",
                      "name": "emailAutomation",
                      "noLabel": true,
                      "value": "success",
                    },
                    Object {
                      "checkCondition": false,
                      "id": "emailAutomation-failure",
                      "label": undefined,
                      "name": "emailAutomation",
                      "noLabel": true,
                      "value": "failure",
                    },
                  ],
                  "section": "email",
                },
                Object {
                  "checkboxes": Array [
                    Object {
                      "checkCondition": false,
                      "id": "slackAutomation-success",
                      "label": "",
                      "name": "slackAutomation",
                      "noLabel": true,
                      "value": "success",
                    },
                    Object {
                      "checkCondition": false,
                      "id": "slackAutomation-failure",
                      "label": undefined,
                      "name": "slackAutomation",
                      "noLabel": true,
                      "value": "failure",
                    },
                  ],
                  "section": "slack",
                },
                Object {
                  "checkboxes": Array [
                    Object {
                      "checkCondition": false,
                      "id": "nokoAutomation-success",
                      "label": "",
                      "name": "nokoAutomation",
                      "noLabel": true,
                      "value": "success",
                    },
                    Object {
                      "checkCondition": false,
                      "id": "nokoAutomation-failure",
                      "label": undefined,
                      "name": "nokoAutomation",
                      "noLabel": true,
                      "value": "failure",
                    },
                  ],
                  "section": "noko",
                },
              ]
            }
          />,
          <AutomationDate
            dateInputs={
              Array [
                Object {
                  "dateSelected": "",
                  "onChange": [Function],
                  "selection": "from",
                },
                Object {
                  "dateSelected": "",
                  "minDate": undefined,
                  "onChange": [Function],
                  "selection": "to",
                },
              ]
            }
          />,
          <button
            className="apply-filters"
            type="submit"
          >
            Apply Filters
          </button>,
        ],
        "className": "filter-dropdown-parent",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "inputs": Array [
              Object {
                "checkCondition": false,
                "id": "search-by-fellow",
                "label": "fellow",
                "name": "search-by",
                "noLabel": false,
                "value": "fellow",
              },
              Object {
                "checkCondition": false,
                "id": "search-by-partner",
                "label": "partner",
                "name": "search-by",
                "noLabel": false,
                "value": "partner",
              },
            ],
            "section": "search-by",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "inputs": Array [
              Object {
                "checkCondition": false,
                "id": "automation-type-onboarding",
                "label": "onboarding",
                "name": "automation-type",
                "noLabel": false,
                "value": "onboarding",
              },
              Object {
                "checkCondition": false,
                "id": "automation-type-offboarding",
                "label": "offboarding",
                "name": "automation-type",
                "noLabel": false,
                "value": "offboarding",
              },
            ],
            "section": "automation-type",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "statusInputs": Array [
              Object {
                "checkboxes": Array [
                  Object {
                    "checkCondition": false,
                    "id": "emailAutomation-success",
                    "label": "",
                    "name": "emailAutomation",
                    "noLabel": true,
                    "value": "success",
                  },
                  Object {
                    "checkCondition": false,
                    "id": "emailAutomation-failure",
                    "label": undefined,
                    "name": "emailAutomation",
                    "noLabel": true,
                    "value": "failure",
                  },
                ],
                "section": "email",
              },
              Object {
                "checkboxes": Array [
                  Object {
                    "checkCondition": false,
                    "id": "slackAutomation-success",
                    "label": "",
                    "name": "slackAutomation",
                    "noLabel": true,
                    "value": "success",
                  },
                  Object {
                    "checkCondition": false,
                    "id": "slackAutomation-failure",
                    "label": undefined,
                    "name": "slackAutomation",
                    "noLabel": true,
                    "value": "failure",
                  },
                ],
                "section": "slack",
              },
              Object {
                "checkboxes": Array [
                  Object {
                    "checkCondition": false,
                    "id": "nokoAutomation-success",
                    "label": "",
                    "name": "nokoAutomation",
                    "noLabel": true,
                    "value": "success",
                  },
                  Object {
                    "checkCondition": false,
                    "id": "nokoAutomation-failure",
                    "label": undefined,
                    "name": "nokoAutomation",
                    "noLabel": true,
                    "value": "failure",
                  },
                ],
                "section": "noko",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "dateInputs": Array [
              Object {
                "dateSelected": "",
                "onChange": [Function],
                "selection": "from",
              },
              Object {
                "dateSelected": "",
                "minDate": undefined,
                "onChange": [Function],
                "selection": "to",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Apply Filters",
            "className": "apply-filters",
            "type": "submit",
          },
          "ref": null,
          "rendered": "Apply Filters",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
