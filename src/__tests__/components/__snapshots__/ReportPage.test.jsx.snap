// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ReportPage /> should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReportPage
    currentUser={
      Object {
        "additionalUserInfo": Object {
          "profile": Object {
            "name": "",
            "picture": "",
          },
        },
      }
    }
    formatDates={[MockFunction]}
    history={Object {}}
    removeCurrentUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Header
          currentUser={
            Object {
              "additionalUserInfo": Object {
                "profile": Object {
                  "name": "",
                  "picture": "",
                },
              },
            }
          }
          history={Object {}}
          removeCurrentUser={[MockFunction]}
        />,
        <ReportNavBar
          filter={[Function]}
        />,
        <div
          id="report-page"
        >
          <div
            className="table-header"
          >
            <table
              className="report-table"
            >
              <thead>
                <tr>
                  <th
                    className="numbering"
                  >
                    #
                  </th>
                  <th>
                    Date
                  </th>
                  <th>
                    Fellow Name
                  </th>
                  <th>
                    Partner Name
                  </th>
                  <th>
                    Type
                  </th>
                  <th>
                    Slack
                  </th>
                  <th>
                    Email
                  </th>
                  <th>
                    Freckle
                  </th>
                </tr>
              </thead>
            </table>
          </div>
          <div
            className="table-body"
          >
            <Spinner
              size="large"
            />
          </div>
          <AutomationDetails
            closeModal={[Function]}
            formatDates={[Function]}
            isModalOpen={false}
            modalContent={Object {}}
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "currentUser": Object {
            "additionalUserInfo": Object {
              "profile": Object {
                "name": "",
                "picture": "",
              },
            },
          },
          "history": Object {},
          "removeCurrentUser": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "filter": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="table-header"
            >
              <table
                className="report-table"
              >
                <thead>
                  <tr>
                    <th
                      className="numbering"
                    >
                      #
                    </th>
                    <th>
                      Date
                    </th>
                    <th>
                      Fellow Name
                    </th>
                    <th>
                      Partner Name
                    </th>
                    <th>
                      Type
                    </th>
                    <th>
                      Slack
                    </th>
                    <th>
                      Email
                    </th>
                    <th>
                      Freckle
                    </th>
                  </tr>
                </thead>
              </table>
            </div>,
            <div
              className="table-body"
            >
              <Spinner
                size="large"
              />
            </div>,
            <AutomationDetails
              closeModal={[Function]}
              formatDates={[Function]}
              isModalOpen={false}
              modalContent={Object {}}
            />,
          ],
          "id": "report-page",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <table
                className="report-table"
              >
                <thead>
                  <tr>
                    <th
                      className="numbering"
                    >
                      #
                    </th>
                    <th>
                      Date
                    </th>
                    <th>
                      Fellow Name
                    </th>
                    <th>
                      Partner Name
                    </th>
                    <th>
                      Type
                    </th>
                    <th>
                      Slack
                    </th>
                    <th>
                      Email
                    </th>
                    <th>
                      Freckle
                    </th>
                  </tr>
                </thead>
              </table>,
              "className": "table-header",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <thead>
                  <tr>
                    <th
                      className="numbering"
                    >
                      #
                    </th>
                    <th>
                      Date
                    </th>
                    <th>
                      Fellow Name
                    </th>
                    <th>
                      Partner Name
                    </th>
                    <th>
                      Type
                    </th>
                    <th>
                      Slack
                    </th>
                    <th>
                      Email
                    </th>
                    <th>
                      Freckle
                    </th>
                  </tr>
                </thead>,
                "className": "report-table",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <tr>
                    <th
                      className="numbering"
                    >
                      #
                    </th>
                    <th>
                      Date
                    </th>
                    <th>
                      Fellow Name
                    </th>
                    <th>
                      Partner Name
                    </th>
                    <th>
                      Type
                    </th>
                    <th>
                      Slack
                    </th>
                    <th>
                      Email
                    </th>
                    <th>
                      Freckle
                    </th>
                  </tr>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <th
                        className="numbering"
                      >
                        #
                      </th>,
                      <th>
                        Date
                      </th>,
                      <th>
                        Fellow Name
                      </th>,
                      <th>
                        Partner Name
                      </th>,
                      <th>
                        Type
                      </th>,
                      <th>
                        Slack
                      </th>,
                      <th>
                        Email
                      </th>,
                      <th>
                        Freckle
                      </th>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "#",
                        "className": "numbering",
                      },
                      "ref": null,
                      "rendered": "#",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Date",
                      },
                      "ref": null,
                      "rendered": "Date",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Fellow Name",
                      },
                      "ref": null,
                      "rendered": "Fellow Name",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Partner Name",
                      },
                      "ref": null,
                      "rendered": "Partner Name",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Type",
                      },
                      "ref": null,
                      "rendered": "Type",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Slack",
                      },
                      "ref": null,
                      "rendered": "Slack",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Email",
                      },
                      "ref": null,
                      "rendered": "Email",
                      "type": "th",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Freckle",
                      },
                      "ref": null,
                      "rendered": "Freckle",
                      "type": "th",
                    },
                  ],
                  "type": "tr",
                },
                "type": "thead",
              },
              "type": "table",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Spinner
                size="large"
              />,
              "className": "table-body",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "size": "large",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "closeModal": [Function],
              "formatDates": [Function],
              "isModalOpen": false,
              "modalContent": Object {},
              "modalType": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Header
            currentUser={
              Object {
                "additionalUserInfo": Object {
                  "profile": Object {
                    "name": "",
                    "picture": "",
                  },
                },
              }
            }
            history={Object {}}
            removeCurrentUser={[MockFunction]}
          />,
          <ReportNavBar
            filter={[Function]}
          />,
          <div
            id="report-page"
          >
            <div
              className="table-header"
            >
              <table
                className="report-table"
              >
                <thead>
                  <tr>
                    <th
                      className="numbering"
                    >
                      #
                    </th>
                    <th>
                      Date
                    </th>
                    <th>
                      Fellow Name
                    </th>
                    <th>
                      Partner Name
                    </th>
                    <th>
                      Type
                    </th>
                    <th>
                      Slack
                    </th>
                    <th>
                      Email
                    </th>
                    <th>
                      Freckle
                    </th>
                  </tr>
                </thead>
              </table>
            </div>
            <div
              className="table-body"
            >
              <Spinner
                size="large"
              />
            </div>
            <AutomationDetails
              closeModal={[Function]}
              formatDates={[Function]}
              isModalOpen={false}
              modalContent={Object {}}
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "currentUser": Object {
              "additionalUserInfo": Object {
                "profile": Object {
                  "name": "",
                  "picture": "",
                },
              },
            },
            "history": Object {},
            "removeCurrentUser": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "filter": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="table-header"
              >
                <table
                  className="report-table"
                >
                  <thead>
                    <tr>
                      <th
                        className="numbering"
                      >
                        #
                      </th>
                      <th>
                        Date
                      </th>
                      <th>
                        Fellow Name
                      </th>
                      <th>
                        Partner Name
                      </th>
                      <th>
                        Type
                      </th>
                      <th>
                        Slack
                      </th>
                      <th>
                        Email
                      </th>
                      <th>
                        Freckle
                      </th>
                    </tr>
                  </thead>
                </table>
              </div>,
              <div
                className="table-body"
              >
                <Spinner
                  size="large"
                />
              </div>,
              <AutomationDetails
                closeModal={[Function]}
                formatDates={[Function]}
                isModalOpen={false}
                modalContent={Object {}}
              />,
            ],
            "id": "report-page",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <table
                  className="report-table"
                >
                  <thead>
                    <tr>
                      <th
                        className="numbering"
                      >
                        #
                      </th>
                      <th>
                        Date
                      </th>
                      <th>
                        Fellow Name
                      </th>
                      <th>
                        Partner Name
                      </th>
                      <th>
                        Type
                      </th>
                      <th>
                        Slack
                      </th>
                      <th>
                        Email
                      </th>
                      <th>
                        Freckle
                      </th>
                    </tr>
                  </thead>
                </table>,
                "className": "table-header",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <thead>
                    <tr>
                      <th
                        className="numbering"
                      >
                        #
                      </th>
                      <th>
                        Date
                      </th>
                      <th>
                        Fellow Name
                      </th>
                      <th>
                        Partner Name
                      </th>
                      <th>
                        Type
                      </th>
                      <th>
                        Slack
                      </th>
                      <th>
                        Email
                      </th>
                      <th>
                        Freckle
                      </th>
                    </tr>
                  </thead>,
                  "className": "report-table",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <tr>
                      <th
                        className="numbering"
                      >
                        #
                      </th>
                      <th>
                        Date
                      </th>
                      <th>
                        Fellow Name
                      </th>
                      <th>
                        Partner Name
                      </th>
                      <th>
                        Type
                      </th>
                      <th>
                        Slack
                      </th>
                      <th>
                        Email
                      </th>
                      <th>
                        Freckle
                      </th>
                    </tr>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <th
                          className="numbering"
                        >
                          #
                        </th>,
                        <th>
                          Date
                        </th>,
                        <th>
                          Fellow Name
                        </th>,
                        <th>
                          Partner Name
                        </th>,
                        <th>
                          Type
                        </th>,
                        <th>
                          Slack
                        </th>,
                        <th>
                          Email
                        </th>,
                        <th>
                          Freckle
                        </th>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "#",
                          "className": "numbering",
                        },
                        "ref": null,
                        "rendered": "#",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Date",
                        },
                        "ref": null,
                        "rendered": "Date",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Fellow Name",
                        },
                        "ref": null,
                        "rendered": "Fellow Name",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Partner Name",
                        },
                        "ref": null,
                        "rendered": "Partner Name",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Type",
                        },
                        "ref": null,
                        "rendered": "Type",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Slack",
                        },
                        "ref": null,
                        "rendered": "Slack",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Email",
                        },
                        "ref": null,
                        "rendered": "Email",
                        "type": "th",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Freckle",
                        },
                        "ref": null,
                        "rendered": "Freckle",
                        "type": "th",
                      },
                    ],
                    "type": "tr",
                  },
                  "type": "thead",
                },
                "type": "table",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Spinner
                  size="large"
                />,
                "className": "table-body",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "size": "large",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "closeModal": [Function],
                "formatDates": [Function],
                "isModalOpen": false,
                "modalContent": Object {},
                "modalType": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
